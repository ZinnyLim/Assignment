//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SiteCore.UI.Process.SubscriberService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessExecutionFault", Namespace="http://schemas.datacontract.org/2004/07/SiteCore.Services.Contracts")]
    [System.SerializableAttribute()]
    public partial class ProcessExecutionFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SubscriberService.ISubscriberService")]
    public interface ISubscriberService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/AddSubscriber", ReplyAction="http://tempuri.org/ISubscriberService/AddSubscriberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SiteCore.UI.Process.SubscriberService.ProcessExecutionFault), Action="http://tempuri.org/ISubscriberService/AddSubscriberProcessExecutionFaultFault", Name="ProcessExecutionFault", Namespace="http://schemas.datacontract.org/2004/07/SiteCore.Services.Contracts")]
        bool AddSubscriber(SiteCore.Business.Entities.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/AddSubscriber", ReplyAction="http://tempuri.org/ISubscriberService/AddSubscriberResponse")]
        System.Threading.Tasks.Task<bool> AddSubscriberAsync(SiteCore.Business.Entities.Subscriber subscriber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/ListSubscriber", ReplyAction="http://tempuri.org/ISubscriberService/ListSubscriberResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SiteCore.UI.Process.SubscriberService.ProcessExecutionFault), Action="http://tempuri.org/ISubscriberService/ListSubscriberProcessExecutionFaultFault", Name="ProcessExecutionFault", Namespace="http://schemas.datacontract.org/2004/07/SiteCore.Services.Contracts")]
        System.Collections.Generic.List<SiteCore.Business.Entities.Subscriber> ListSubscriber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubscriberService/ListSubscriber", ReplyAction="http://tempuri.org/ISubscriberService/ListSubscriberResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<SiteCore.Business.Entities.Subscriber>> ListSubscriberAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubscriberServiceChannel : SiteCore.UI.Process.SubscriberService.ISubscriberService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubscriberServiceClient : System.ServiceModel.ClientBase<SiteCore.UI.Process.SubscriberService.ISubscriberService>, SiteCore.UI.Process.SubscriberService.ISubscriberService {
        
        public SubscriberServiceClient() {
        }
        
        public SubscriberServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SubscriberServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriberServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubscriberServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddSubscriber(SiteCore.Business.Entities.Subscriber subscriber) {
            return base.Channel.AddSubscriber(subscriber);
        }
        
        public System.Threading.Tasks.Task<bool> AddSubscriberAsync(SiteCore.Business.Entities.Subscriber subscriber) {
            return base.Channel.AddSubscriberAsync(subscriber);
        }
        
        public System.Collections.Generic.List<SiteCore.Business.Entities.Subscriber> ListSubscriber() {
            return base.Channel.ListSubscriber();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<SiteCore.Business.Entities.Subscriber>> ListSubscriberAsync() {
            return base.Channel.ListSubscriberAsync();
        }
    }
}
